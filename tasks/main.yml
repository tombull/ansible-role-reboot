---
# tasks file for reboot
- name: Install requirements
  package:
    name: "{{ reboot_requirements }}"
    state: present
  register: reboot_install_requirements
  when: ansible_distribution | lower != 'coreos'
  until: reboot_install_requirements is succeeded
  become: yes
  retries: 3

- name: Check for needs-restarting for rhel
  stat:
    path: /usr/bin/needs-restarting
  register: reboot_check_for_needs_restarting_for_rhel

- name: Check for needs-restarting for debian
  stat:
    path: /var/run/needs-restarting
  register: reboot_check_for_needs_restarting_for_debian

- name: Check for reboot-required for ubuntu
  stat:
    path: /var/run/reboot-required
  register: reboot_check_for_reboot_required_for_ubuntu

- name: See if a reboot is required for rhel
  command: "{{ reboot_needs_restarting_command }}"
  check_mode: no
  register: needsrestarting
  changed_when:
    - needsrestarting.rc != 0
  failed_when:
    - needsrestarting.rc != 1
    - needsrestarting.rc != 0
  when:
    - ansible_virtualization_type != "docker"
    - ansible_virtualization_type != "container"
    - reboot_check_for_needs_restarting_for_rhel.stat.exists
    - not reboot_always | bool

- name: See if a reboot is required for debian
  command: "{{ reboot_needs_restarting_command }}"
  check_mode: no
  register: needrestarting
  changed_when: no
  when:
    - ansible_virtualization_type != "docker"
    - ansible_virtualization_type != "container"
    - ansible_os_family == "Debian"
  become: yes

- name: Reboot the machine
  reboot:
    msg: "{{ reboot_message }}"
    post_reboot_delay: "{{ reboot_delay }}"
  when:
    - ansible_virtualization_type != "docker"
    - ansible_virtualization_type != "container"
    - reboot_always | bool or
      ((reboot_check_for_needs_restarting_for_rhel.stat.exists and
      needsrestarting.rc == 1) or
      reboot_check_for_needs_restarting_for_debian.stat.exists or
      reboot_check_for_reboot_required_for_ubuntu.stat.exists) or
      needrestarting.stdout is search("NEEDRESTART-KSTA:\s*3")
  notify:
    - 1 wait for the start of reboot
    - 2 wait for the machine to be up
    - 3 gather facts after reboot
  become: yes

- name: Flush handlers
  meta: flush_handlers
